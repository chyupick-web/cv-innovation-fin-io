## Inspiration

More and more people are starting to use cryptocurrencies as a means of paying for everyday needs. 

Rising amount of people getting scammed and their private keys stolen via desktop and mobile applications, browser extensions, js injections, etc. Scam code which will parse your whole disk to find a trail of crypt private keys can be anywhere nowadays - in that new cool game everyone is hyped for at appstore, or even in your favourite messenger app update.

Easier to keep track of your private keys and use them at different platforms. No need to copy them somewhere or manually rewrite them by hand, you only need to place your signature on transactions generated for you at our "flightwallet.terminal".

A Parity Signer for all currencies

## What it does

### terminal part 

flightwallet.terminal lets you to create a transaction so you could sign it with our app.

### mobile app part

At first start it generates 2 wallets: BTC and ETH which have the same private key (but, ofcourse, different public ones).

After that you are facing a screen which has 2 options: to pay with ETH or with BTC.

Choosing one of them leads you to a QR code scanner: it should scan a transaction already prepared for you at flightwallet.terminal

Once you've scanned the transaction you are led to a screen with transaction information where you can check if the amount is 

Once app scanned the transaction you can view the recipient, wallet name, amount and tax to pay. If all is ok then you APPROVE it so app will sign it with your private key and generate QR code with for that signed transaction

QR code with signed transaction should be scanned by flightwallet.terminal and send on to some node so it would register at blockchain. 

## How we built it

We've made a static frontend terminal page for creating transactions and sending signed transactions into blockchain network.

We've also made an iOS and android apps for signing transactions and keeping private keys encrypted.

It's open source and fully transparent so our users know that we are at their side.

## Challenges we ran into

There is lack of good libs to work with crypt and QR codes for iOS and Android so we had to manually fix them a bit.

Developing at a fast pace because first 24 hours of hackathon were spent at solving CTF track

Lack of expertise in mobile development

## Accomplishments that we're proud of

We've got MVP ready by 5 hours into the process.

App works really fast.

## What we've learned

Everyone in team learned something different.

How to implement bitcoin encryption inside the iOS app without any standard libraries.

How to implement QR code online scanning in browser.

## What's next for flight-wallet

Android app, a better website for invoice generation.

ICO, lamborgini diablo

Better developers

Unit testing

More crypt currencies.

Importing wallets by private keys.

Better encryption.

Redesign.

